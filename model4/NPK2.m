function [y1] = myNeuralNetworkFunction(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 22-Aug-2018 21:50:51.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = 3xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [30;13.9;40];
x1_step1.gain = [0.00803212851405622;0.026281208935611;0.00714285714285714];
x1_step1.ymin = -1;

% Layer 1
b1 = [-0.92258085609656370618;1.0470231354708381399;-1.0817287739545959901];
IW1_1 = [4.1423715558173803686 -3.9306026124592561288 -0.88954358398726030011;0.76242448511857119353 1.8490096005306004834 0.33350857198067140885;1.3738694509153777101 -3.0950994279674413079 -0.19390939961189401775];

% Layer 2
b2 = -0.075549628156384274202;
LW2_1 = [-2.5981397393856053846 1.2437910430885732449 3.1663284898256547351];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0831946755407654;
y1_step1.xoffset = 14.32;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
